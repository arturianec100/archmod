add_library(am_common_options INTERFACE)
set(options -Wall -Wextra -Wshadow -Wnon-virtual-dtor -stdlib=libc++ -fuse-ld=lld)
target_link_options(am_common_options INTERFACE ${options})
target_compile_options(am_common_options INTERFACE ${options})
if(EMSCRIPTEN)
  set(options -sALLOW_MEMORY_GROWTH=1 -sMAXIMUM_MEMORY=16gb)
  target_link_options(am_common_options INTERFACE ${options})
  target_compile_options(am_common_options INTERFACE ${options})
endif()

add_library(sdl_all INTERFACE)
if(TARGET SDL2::SDL2main)
  target_link_libraries(sdl_all INTERFACE SDL2::SDL2main)
endif()
target_link_libraries(sdl_all INTERFACE SDL2::SDL2 SDL2_ttf::SDL2_ttf SDL2_image::SDL2_image SDL2_mixer::SDL2_mixer)

get_target_property(RML_INCLUDES rmlui_core INCLUDE_DIRECTORIES)
target_include_directories(rmlui INTERFACE ${RML_INCLUDES} "${AM_ROOT}/thirdparty/RmlUi/Backends")
target_compile_definitions(rmlui INTERFACE RMLUI_SDL_VERSION_MAJOR=2)
set(options -stdlib=libc++ -fuse-ld=lld)
target_link_options(rmlui_core PRIVATE ${options})
target_compile_options(rmlui_core PRIVATE ${options})
target_link_options(rmlui_debugger PRIVATE ${options})
target_compile_options(rmlui_debugger PRIVATE ${options})

unset(options)
